package sh.nkt.geheim.repository;

import org.springframework.data.jdbc.repository.query.Modifying;
import org.springframework.data.jdbc.repository.query.Query;
import org.springframework.data.repository.CrudRepository;
import sh.nkt.geheim.domain.Note;

import java.time.Instant;
import java.util.Optional;
import java.util.UUID;

/**
 * Repository interface for managing {@link Note} entities.
 * Provides methods to consume notes and delete expired notes.
 *
 * <p>All methods are meant to run inside a @Transactional boundary</p>
 */
public interface NoteRepository extends CrudRepository<Note, UUID> {

    /**
     * Atomically decrements remaining reads and returns the updated row.
     *
     * <p>If {@code remaining_reads > 0}: decrement and return; otherwise return empty.</p>
     *
     * @param id the ID of the note to find
     * @return an Optional containing the note if found and has remaining reads, otherwise empty
     */
    @Query("""
            UPDATE notes
            SET remaining_reads = remaining_reads - 1
            WHERE id = :id 
                AND remaining_reads > 0
            RETURNING *
            """)
    Optional<Note> consume(UUID id);


    /**
     * Delete all notes whose TTL has passed. Autogenerated methdod.
     *
     * @param timestamp any note with {@code expires_at < timestamp} will be removed
     */
    void deleteByExpiresAtBefore(Instant timestamp);
}
